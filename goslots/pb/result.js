/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.pb.Result');

goog.require('jspb.Message');
goog.require('proto.pb.User');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.Result = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.Result.repeatedFields_, null);
};
goog.inherits(proto.pb.Result, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pb.Result.displayName = 'proto.pb.Result';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.Result.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.Result.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.Result.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.Result} msg The msg instance to transform.
 * @return {!Object}
 */
proto.pb.Result.toObject = function(includeInstance, msg) {
  var f, obj = {
    ret: msg.getRet(),
    win: msg.getWin(),
    valueList: jspb.Message.getField(msg, 3),
    user: (f = msg.getUser()) && proto.pb.User.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.pb.Result} The clone.
 */
proto.pb.Result.prototype.cloneMessage = function() {
  return /** @type {!proto.pb.Result} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int32 ret = 1;
 * @return {number}
 */
proto.pb.Result.prototype.getRet = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.pb.Result.prototype.setRet = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 win = 2;
 * @return {number}
 */
proto.pb.Result.prototype.getWin = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.pb.Result.prototype.setWin = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * repeated int32 value = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.pb.Result.prototype.getValueList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 3));
};


/** @param {Array.<number>} value  */
proto.pb.Result.prototype.setValueList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


proto.pb.Result.prototype.clearValueList = function() {
  jspb.Message.setField(this, 3, []);
};


/**
 * optional User user = 4;
 * @return {proto.pb.User}
 */
proto.pb.Result.prototype.getUser = function() {
  return /** @type{proto.pb.User} */ (
    jspb.Message.getWrapperField(this, proto.pb.User, 4));
};


/** @param {proto.pb.User|undefined} value  */
proto.pb.Result.prototype.setUser = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.pb.Result.prototype.clearUser = function() {
  this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.pb.Result.prototype.hasUser = function() {
  return jspb.Message.getField(this, 4) != null;
};


