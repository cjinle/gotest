// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// FooClient is the client API for Foo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FooClient interface {
	Add(ctx context.Context, in *Args, opts ...grpc.CallOption) (*Reply, error)
	SayHello(ctx context.Context, opts ...grpc.CallOption) (Foo_SayHelloClient, error)
	Pipe(ctx context.Context, opts ...grpc.CallOption) (Foo_PipeClient, error)
}

type fooClient struct {
	cc grpc.ClientConnInterface
}

func NewFooClient(cc grpc.ClientConnInterface) FooClient {
	return &fooClient{cc}
}

func (c *fooClient) Add(ctx context.Context, in *Args, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/pb.Foo/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fooClient) SayHello(ctx context.Context, opts ...grpc.CallOption) (Foo_SayHelloClient, error) {
	stream, err := c.cc.NewStream(ctx, &Foo_ServiceDesc.Streams[0], "/pb.Foo/SayHello", opts...)
	if err != nil {
		return nil, err
	}
	x := &fooSayHelloClient{stream}
	return x, nil
}

type Foo_SayHelloClient interface {
	Send(*HelloRequest) error
	Recv() (*HelloReply, error)
	grpc.ClientStream
}

type fooSayHelloClient struct {
	grpc.ClientStream
}

func (x *fooSayHelloClient) Send(m *HelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fooSayHelloClient) Recv() (*HelloReply, error) {
	m := new(HelloReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fooClient) Pipe(ctx context.Context, opts ...grpc.CallOption) (Foo_PipeClient, error) {
	stream, err := c.cc.NewStream(ctx, &Foo_ServiceDesc.Streams[1], "/pb.Foo/Pipe", opts...)
	if err != nil {
		return nil, err
	}
	x := &fooPipeClient{stream}
	return x, nil
}

type Foo_PipeClient interface {
	Send(*DataPack) error
	Recv() (*DataPack, error)
	grpc.ClientStream
}

type fooPipeClient struct {
	grpc.ClientStream
}

func (x *fooPipeClient) Send(m *DataPack) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fooPipeClient) Recv() (*DataPack, error) {
	m := new(DataPack)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FooServer is the server API for Foo service.
// All implementations must embed UnimplementedFooServer
// for forward compatibility
type FooServer interface {
	Add(context.Context, *Args) (*Reply, error)
	SayHello(Foo_SayHelloServer) error
	Pipe(Foo_PipeServer) error
	mustEmbedUnimplementedFooServer()
}

// UnimplementedFooServer must be embedded to have forward compatible implementations.
type UnimplementedFooServer struct {
}

func (UnimplementedFooServer) Add(context.Context, *Args) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedFooServer) SayHello(Foo_SayHelloServer) error {
	return status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedFooServer) Pipe(Foo_PipeServer) error {
	return status.Errorf(codes.Unimplemented, "method Pipe not implemented")
}
func (UnimplementedFooServer) mustEmbedUnimplementedFooServer() {}

// UnsafeFooServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FooServer will
// result in compilation errors.
type UnsafeFooServer interface {
	mustEmbedUnimplementedFooServer()
}

func RegisterFooServer(s grpc.ServiceRegistrar, srv FooServer) {
	s.RegisterService(&Foo_ServiceDesc, srv)
}

func _Foo_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FooServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Foo/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FooServer).Add(ctx, req.(*Args))
	}
	return interceptor(ctx, in, info, handler)
}

func _Foo_SayHello_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FooServer).SayHello(&fooSayHelloServer{stream})
}

type Foo_SayHelloServer interface {
	Send(*HelloReply) error
	Recv() (*HelloRequest, error)
	grpc.ServerStream
}

type fooSayHelloServer struct {
	grpc.ServerStream
}

func (x *fooSayHelloServer) Send(m *HelloReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fooSayHelloServer) Recv() (*HelloRequest, error) {
	m := new(HelloRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Foo_Pipe_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FooServer).Pipe(&fooPipeServer{stream})
}

type Foo_PipeServer interface {
	Send(*DataPack) error
	Recv() (*DataPack, error)
	grpc.ServerStream
}

type fooPipeServer struct {
	grpc.ServerStream
}

func (x *fooPipeServer) Send(m *DataPack) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fooPipeServer) Recv() (*DataPack, error) {
	m := new(DataPack)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Foo_ServiceDesc is the grpc.ServiceDesc for Foo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Foo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Foo",
	HandlerType: (*FooServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Foo_Add_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SayHello",
			Handler:       _Foo_SayHello_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Pipe",
			Handler:       _Foo_Pipe_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pb.proto",
}
